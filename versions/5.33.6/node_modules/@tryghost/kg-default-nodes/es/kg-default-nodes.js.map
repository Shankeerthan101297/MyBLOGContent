{"version":3,"file":"kg-default-nodes.js","sources":["../lib/KoenigDecoratorNode.js","../lib/nodes/image/ImageParser.js","../lib/utils/get-available-image-widths.js","../lib/utils/is-local-content-image.js","../lib/utils/is-unsplash-image.js","../lib/utils/srcset-attribute.js","../lib/utils/resize-image.js","../lib/nodes/image/ImageRenderer.js","../lib/nodes/image/ImageNode.js","../lib/kg-default-nodes.js"],"sourcesContent":["import {DecoratorNode} from 'lexical';\n\nexport class KoenigDecoratorNode extends DecoratorNode {}\n\nexport function $isKoenigCard(node) {\n    return node instanceof KoenigDecoratorNode;\n}\n","export class ImageParser {\n    constructor($createNode) {\n        this.$createNode = $createNode;\n    }\n\n    get DOMConversionMap() {\n        const self = this;\n\n        return {\n            img: () => ({\n                conversion(domNode) {\n                    if (domNode.tagName === 'IMG') {\n                        const {alt: altText, src, title, width, height} = domNode;\n                        const node = self.$createNode({altText, src, title, width, height});\n                        return {node};\n                    }\n\n                    return null;\n                },\n                priority: 1\n            })\n            // TODO: add <figure> and other handling from kg-parser-plugins\n        };\n    }\n}\n","export const getAvailableImageWidths = function (image, imageSizes) {\n    // get a sorted list of the available responsive widths\n    const imageWidths = Object.values(imageSizes)\n        .map(({width}) => width)\n        .sort((a, b) => a - b);\n\n    // select responsive widths that are usable based on the image width\n    const availableImageWidths = imageWidths\n        .filter(width => width <= image.width);\n\n    // add the original image size to the responsive list if it's not captured by largest responsive size\n    // - we can't know the width/height of the original `src` image because we don't know if it was resized\n    //   or not. Adding the original image to the responsive list ensures we're not showing smaller sized\n    //   images than we need to be\n    if (image.width > availableImageWidths[availableImageWidths.length - 1] && image.width < imageWidths[imageWidths.length - 1]) {\n        availableImageWidths.push(image.width);\n    }\n\n    return availableImageWidths;\n};\n","export const isLocalContentImage = function (url, siteUrl = '') {\n    const normalizedSiteUrl = siteUrl.replace(/\\/$/, '');\n    const imagePath = url.replace(normalizedSiteUrl, '');\n    return /^(\\/.*|__GHOST_URL__)\\/?content\\/images\\//.test(imagePath);\n};\n","export const isUnsplashImage = function (url) {\n    return /images\\.unsplash\\.com/.test(url);\n};\n","import {isLocalContentImage} from './is-local-content-image';\nimport {getAvailableImageWidths} from './get-available-image-widths';\nimport {isUnsplashImage} from './is-unsplash-image';\n\n// default content sizes: [600, 1000, 1600, 2400]\n\nexport const getSrcsetAttribute = function ({src, width, options}) {\n    if (!options.imageOptimization || options.imageOptimization.srcsets === false || !width || !options.imageOptimization.contentImageSizes) {\n        return;\n    }\n\n    if (isLocalContentImage(src, options.siteUrl) && options.canTransformImage && !options.canTransformImage(src)) {\n        return;\n    }\n\n    const srcsetWidths = getAvailableImageWidths({width}, options.imageOptimization.contentImageSizes);\n\n    // apply srcset if this is a relative image that matches Ghost's image url structure\n    if (isLocalContentImage(src, options.siteUrl)) {\n        const [, imagesPath, filename] = src.match(/(.*\\/content\\/images)\\/(.*)/);\n        const srcs = [];\n\n        srcsetWidths.forEach((srcsetWidth) => {\n            if (srcsetWidth === width) {\n                // use original image path if width matches exactly (avoids 302s from size->original)\n                srcs.push(`${src} ${srcsetWidth}w`);\n            } else if (srcsetWidth <= width) {\n                // avoid creating srcset sizes larger than intrinsic image width\n                srcs.push(`${imagesPath}/size/w${srcsetWidth}/${filename} ${srcsetWidth}w`);\n            }\n        });\n\n        if (srcs.length) {\n            return srcs.join(', ');\n        }\n    }\n\n    // apply srcset if this is an Unsplash image\n    if (isUnsplashImage(src)) {\n        const unsplashUrl = new URL(src);\n        const srcs = [];\n\n        srcsetWidths.forEach((srcsetWidth) => {\n            unsplashUrl.searchParams.set('w', srcsetWidth);\n            srcs.push(`${unsplashUrl.href} ${srcsetWidth}w`);\n        });\n\n        return srcs.join(', ');\n    }\n};\n\nexport const setSrcsetAttribute = function (elem, image, options) {\n    if (!elem || !['IMG', 'SOURCE'].includes(elem.tagName) || !elem.getAttribute('src') || !image) {\n        return;\n    }\n\n    const {src, width} = image;\n    const srcset = getSrcsetAttribute({src, width, options});\n\n    if (srcset) {\n        elem.setAttribute('srcset', srcset);\n    }\n};\n","export const resizeImage = function (image, {width: desiredWidth, height: desiredHeight} = {}) {\n    const {width, height} = image;\n    const ratio = width / height;\n\n    if (desiredWidth) {\n        const resizedHeight = Math.round(desiredWidth / ratio);\n\n        return {\n            width: desiredWidth,\n            height: resizedHeight\n        };\n    }\n\n    if (desiredHeight) {\n        const resizedWidth = Math.round(desiredHeight * ratio);\n\n        return {\n            width: resizedWidth,\n            height: desiredHeight\n        };\n    }\n};\n","import {getAvailableImageWidths} from '../../utils/get-available-image-widths';\nimport {isLocalContentImage} from '../../utils/is-local-content-image';\nimport {setSrcsetAttribute} from '../../utils/srcset-attribute';\nimport {resizeImage} from '../../utils/resize-image';\n\nexport function renderImageNodeToDOM(node, options = {}) {\n    /* c8 ignore start */\n    if (!options.createDocument) {\n        let document = typeof window !== 'undefined' && window.document;\n\n        if (!document) {\n            throw new Error('renderImageNodeToDOM() must be passed a `createDocument` function as an option when used in a non-browser environment'); // eslint-disable-line\n        }\n\n        options.createDocument = function () {\n            return document;\n        };\n    }\n    /* c8 ignore stop */\n\n    const document = options.createDocument();\n\n    if (!node.getSrc() || node.getSrc().trim() === '') {\n        return document.createTextNode('');\n    }\n\n    const figure = document.createElement('figure');\n\n    let figureClasses = 'kg-card kg-image-card';\n    if (node.getCardWidth() !== 'regular') {\n        figureClasses += ` kg-width-${node.getCardWidth()}`;\n    }\n\n    figure.setAttribute('class', figureClasses);\n\n    const img = document.createElement('img');\n    img.setAttribute('src', node.getSrc());\n    img.setAttribute('alt', node.getAltText());\n    img.setAttribute('loading', 'lazy');\n\n    if (node.getTitle()) {\n        img.setAttribute('title', node.getTitle());\n    }\n\n    if (node.getImgWidth() && node.getImgHeight()) {\n        img.setAttribute('width', node.getImgWidth());\n        img.setAttribute('height', node.getImgHeight());\n    }\n\n    // images can be resized to max width, if that's the case output\n    // the resized width/height attrs to ensure 3rd party gallery plugins\n    // aren't affected by differing sizes\n    const {canTransformImage} = options;\n    const {defaultMaxWidth} = options.imageOptimization || {};\n    if (\n        defaultMaxWidth &&\n            node.getImgWidth() > defaultMaxWidth &&\n            isLocalContentImage(node.getSrc(), options.siteUrl) &&\n            canTransformImage &&\n            canTransformImage(node.getSrc())\n    ) {\n        const imageDimensions = {\n            width: node.getImgWidth(),\n            height: node.getImgHeight()\n        };\n        const {width, height} = resizeImage(imageDimensions, {width: defaultMaxWidth});\n        img.setAttribute('width', width);\n        img.setAttribute('height', height);\n    }\n\n    if (options.target !== 'email') {\n        const imgAttributes = {\n            src: node.getSrc(),\n            width: node.getImgWidth(),\n            height: node.getImgHeight()\n        };\n        setSrcsetAttribute(img, imgAttributes, options);\n\n        if (img.getAttribute('srcset') && node.getImgWidth() && node.getImgWidth() >= 720) {\n            // standard size\n            if (!node.getCardWidth() || node.getCardWidth() === 'regular') {\n                img.setAttribute('sizes', '(min-width: 720px) 720px');\n            }\n\n            if (node.getCardWidth() === 'wide' && node.getImgWidth() >= 1200) {\n                img.setAttribute('sizes', '(min-width: 1200px) 1200px');\n            }\n        }\n    }\n\n    // Outlook is unable to properly resize images without a width/height\n    // so we add that at the expected size in emails (600px) and use a higher\n    // resolution image to keep images looking good on retina screens\n    if (options.target === 'email' && node.getImgWidth() && node.getImgHeight()) {\n        let imageDimensions = {\n            width: node.getImgWidth(),\n            height: node.getImgHeight()\n        };\n        if (node.getImgWidth() >= 600) {\n            imageDimensions = resizeImage(imageDimensions, {width: 600});\n        }\n        img.setAttribute('width', imageDimensions.width);\n        img.setAttribute('height', imageDimensions.height);\n\n        if (isLocalContentImage(node.getSrc(), options.siteUrl) && options.canTransformImage?.(node.getSrc())) {\n            // find available image size next up from 2x600 so we can use it for the \"retina\" src\n            const availableImageWidths = getAvailableImageWidths(node, options.imageOptimization.contentImageSizes);\n            const srcWidth = availableImageWidths.find(width => width >= 1200);\n\n            if (!srcWidth || srcWidth === node.getImgWidth()) {\n                // do nothing, width is smaller than retina or matches the original node src\n            } else {\n                const [, imagesPath, filename] = node.getSrc().match(/(.*\\/content\\/images)\\/(.*)/);\n                img.setAttribute('src', `${imagesPath}/size/w${srcWidth}/${filename}`);\n            }\n        }\n    }\n\n    figure.appendChild(img);\n\n    if (node.getCaption()) {\n        const caption = document.createElement('figcaption');\n        caption.innerHTML = node.getCaption();\n        figure.appendChild(caption);\n    }\n\n    return figure;\n}\n","import {createCommand} from 'lexical';\nimport {KoenigDecoratorNode} from '../../KoenigDecoratorNode';\nimport {ImageParser} from './ImageParser';\nimport {renderImageNodeToDOM} from './ImageRenderer';\n\nexport const INSERT_IMAGE_COMMAND = createCommand();\nexport const UPLOAD_IMAGE_COMMAND = createCommand();\n\nexport class ImageNode extends KoenigDecoratorNode {\n    // payload properties\n    __src;\n    __caption;\n    __title;\n    __altText;\n    __cardWidth;\n    __width;\n    __height;\n\n    static getType() {\n        return 'image';\n    }\n\n    static clone(node) {\n        return new ImageNode(\n            node.getDataset(),\n            node.__key\n        );\n    }\n\n    // used by `@tryghost/url-utils` to transform URLs contained in the serialized JSON\n    static get urlTransformMap() {\n        return {\n            src: 'url',\n            caption: 'html'\n        };\n    }\n\n    getDataset() {\n        return {\n            src: this.__src,\n            caption: this.__caption,\n            title: this.__title,\n            altText: this.__altText,\n            width: this.__width,\n            height: this.__height,\n            cardWidth: this.__cardWidth\n        };\n    }\n\n    // from https://github.com/TryGhost/Ghost/blob/main/ghost/admin/app/components/gh-image-uploader.js#L18\n    static extensionTypes = ['gif', 'jpg', 'jpeg', 'png', 'svg', 'svgz', 'webp'];\n    static mimeTypes = ['image/gif', 'image/jpg', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/webp'];\n\n    constructor({src, caption, title, altText, cardWidth, width, height} = {}, key) {\n        super(key);\n        this.__src = src || '';\n        this.__title = title || '';\n        this.__caption = caption || '';\n        this.__altText = altText || '';\n        this.__width = width || null;\n        this.__height = height || null;\n        this.__cardWidth = cardWidth || 'regular';\n    }\n\n    static importJSON(serializedNode) {\n        const {src, caption, title, altText, width, height, cardWidth} = serializedNode;\n        const node = $createImageNode({\n            src,\n            caption,\n            title,\n            altText,\n            width,\n            height,\n            cardWidth\n        });\n        return node;\n    }\n\n    exportJSON() {\n        // checks if src is a data string\n        const src = this.getSrc();\n        const isBlob = src.startsWith('data:');\n        const dataset = {\n            type: 'image',\n            src: isBlob ? '<base64String>' : this.getSrc(),\n            width: this.getImgWidth(),\n            height: this.getImgHeight(),\n            title: this.getTitle(),\n            altText: this.getAltText(),\n            caption: this.getCaption(),\n            cardWidth: this.getCardWidth()\n        };\n        return dataset;\n    }\n\n    static importDOM() {\n        const parser = new ImageParser($createImageNode);\n        return parser.DOMConversionMap;\n    }\n\n    exportDOM(options = {}) {\n        const element = renderImageNodeToDOM(this, options);\n        return {element};\n    }\n\n    /* c8 ignore start */\n    createDOM() {\n        const element = document.createElement('div');\n        return element;\n    }\n\n    updateDOM() {\n        return false;\n    }\n\n    isInline() {\n        return false;\n    }\n    /* c8 ignore stop */\n\n    getSrc() {\n        return this.__src;\n    }\n\n    setSrc(src) {\n        const writable = this.getWritable();\n        return writable.__src = src;\n    }\n\n    getTitle() {\n        return this.__title;\n    }\n\n    setTitle(title) {\n        const writable = this.getWritable();\n        return writable.__title = title;\n    }\n\n    setCardWidth(cardWidth) {\n        const writable = this.getWritable();\n        return writable.__cardWidth = cardWidth;\n    }\n\n    getCardWidth() {\n        return this.__cardWidth;\n    }\n\n    getImgWidth() {\n        return this.__width;\n    }\n\n    setImgWidth(width) {\n        const writable = this.getWritable();\n        return writable.__width = width;\n    }\n\n    getImgHeight() {\n        return this.__height;\n    }\n\n    setImgHeight(height) {\n        const writable = this.getWritable();\n        return writable.__height = height;\n    }\n\n    getCaption() {\n        return this.__caption;\n    }\n\n    setCaption(caption) {\n        const writable = this.getWritable();\n        return writable.__caption = caption;\n    }\n\n    getAltText() {\n        return this.__altText;\n    }\n\n    setAltText(altText) {\n        const writable = this.getWritable();\n        return writable.__altText = altText;\n    }\n\n    // should be overridden\n    /* c8 ignore next 3 */\n    decorate() {\n        return '';\n    }\n}\n\nexport const $createImageNode = (dataset) => {\n    return new ImageNode(dataset);\n};\n\nexport function $isImageNode(node) {\n    return node instanceof ImageNode;\n}\n","import * as image from './nodes/image/ImageNode';\n\n// re-export everything for easier importing\nexport * from './KoenigDecoratorNode';\nexport * from './nodes/image/ImageNode';\nexport * from './nodes/image/ImageParser';\n\n// export convenience objects for use elsewhere\nexport const DEFAULT_NODES = [\n    image.ImageNode\n];\n"],"names":["KoenigDecoratorNode","DecoratorNode","$isKoenigCard","node","ImageParser","constructor","$createNode","DOMConversionMap","self","img","conversion","domNode","tagName","alt","altText","src","title","width","height","priority","getAvailableImageWidths","image","imageSizes","imageWidths","Object","values","map","sort","a","b","availableImageWidths","filter","length","push","isLocalContentImage","url","siteUrl","normalizedSiteUrl","replace","imagePath","test","isUnsplashImage","getSrcsetAttribute","options","imageOptimization","srcsets","contentImageSizes","canTransformImage","srcsetWidths","imagesPath","filename","match","srcs","forEach","srcsetWidth","join","unsplashUrl","URL","searchParams","set","href","setSrcsetAttribute","elem","includes","getAttribute","srcset","setAttribute","resizeImage","desiredWidth","desiredHeight","ratio","resizedHeight","Math","round","resizedWidth","renderImageNodeToDOM","createDocument","document","window","Error","getSrc","trim","createTextNode","figure","createElement","figureClasses","getCardWidth","getAltText","getTitle","getImgWidth","getImgHeight","defaultMaxWidth","imageDimensions","target","imgAttributes","srcWidth","find","appendChild","getCaption","caption","innerHTML","INSERT_IMAGE_COMMAND","createCommand","UPLOAD_IMAGE_COMMAND","ImageNode","__src","__caption","__title","__altText","__cardWidth","__width","__height","getType","clone","getDataset","__key","urlTransformMap","cardWidth","extensionTypes","mimeTypes","key","importJSON","serializedNode","$createImageNode","exportJSON","isBlob","startsWith","dataset","type","importDOM","parser","exportDOM","element","createDOM","updateDOM","isInline","setSrc","writable","getWritable","setTitle","setCardWidth","setImgWidth","setImgHeight","setCaption","setAltText","decorate","$isImageNode","DEFAULT_NODES"],"mappings":"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"}